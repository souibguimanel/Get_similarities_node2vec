# -*- coding: utf-8 -*-
"""Copy_of_EmbeddingOrdersCustomers&NationRegion (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aolgR_Tuu2lUbpVheQeehKO6gBklF02B
"""

import networkx as nx
import matplotlib.pyplot as plt
my_graph = nx.Graph()






edges = nx.read_edgelist('sample_data/graph2.txt')   # OrderKey (id), wordnet

#nodes = nx.read_adjlist("nodes.txt")
my_graph.add_edges_from(edges.edges())
#my_graph.add_nodes_from(nodes)
plt.figure(3,figsize=(12,12)) 
nx.draw(my_graph, with_labels=True, font_weight='bold')
plt.show()

for edge in my_graph.edges:
    print(edge)

!pip install node2vec



from node2vec import Node2Vec
graph=my_graph
# Precompute probabilities and generate walks - **ON WINDOWS ONLY WORKS WITH workers=1**
#node2vec = Node2Vec(graph, dimensions=64, walk_length=30, num_walks=200, workers=4)  # Use temp_folder for big graphs
#node2vec = Node2Vec(graph, dimensions=64, walk_length=10, num_walks=100, workers=4)  # Use temp_folder for big graphs   Good !

# Generate walks
node2vec = Node2Vec(graph, dimensions=20, walk_length=16, num_walks=100)

# Embed nodes
model = node2vec.fit(window=10, min_count=1, batch_words=4)  # Any keywords acceptable by gensim.Word2Vec can be passed, `dimensions` and `workers` are automatically passed (from the Node2Vec constructor)

# a list of the most similar nodes and the corresponding probabilities 
model.wv.most_similar('"$/O_ORDERKEY"', topn=2)  # Output node names are always strings

for node, _ in model.most_similar('"$/O_ORDERKEY"'):
    print(node)

model.wv.get_vector('"$/Customers/NATIONKEY"')    # get vector of the node